{"version":3,"sources":["controllers/AppController.ts"],"names":["AppController","AppController.pickColor","AppController.changeToggleCollapse","AppController.changeVisibleLayer","AppController.dataChanged","AppController.dataChanged.getDataSuccess","AppController.dataChanged.getDataError","AppController.uploadImageData","AppController.uploadImageData.uploadSuccess","AppController.uploadImageData.uploadError"],"mappings":"AAAA,CAAC;IACC,OAAO,CACJ,MAAM,CAAC,wBAAwB,CAAC,CAChC,UAAU,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IAE9C,aAAa,CAAC,OAAO,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAGlE,SAAS,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;QACpDA,IAAIA,IAAIA,GAAGA,IAAIA,CAACA;QAEhBA,OAAOA,CAACA,MAAMA,CAACA,IAAIA,EAAEA;YACnBA,KAAKA,EAAEA,KAAKA;YACZA,MAAMA,EAAEA,MAAMA;YACdA,IAAIA,EAAEA,IAAIA;YACVA,SAASA,EAAEA,SAASA;YACpBA,WAAWA,EAAEA,WAAWA;YACxBA,kBAAkBA,EAAEA,kBAAkBA;YACtCA,oBAAoBA,EAAEA,oBAAoBA;YAC1CA,YAAYA,EAAEA,IAAIA;YAClBA,WAAWA,EAAEA,IAAIA;YACjBA,KAAKA,EAAEA,GAAGA;YACVA,KAAKA,EAAEA;gBACLA,QAAQA,EAAEA,CAACA;gBACXA,QAAQA,EAAEA,CAACA;gBACXA,UAAUA,EAAEA,UAAUA;gBACtBA,YAAYA,EAAEA,GAAGA;gBACjBA,KAAKA,EAAEA,SAASA;gBAChBA,SAASA,EAAEA,SAASA;gBACpBA,MAAMA,EAAEA,KAAKA;gBACbA,KAAKA,EAAEA,KAAKA;aACbA;YACDA,UAAUA,EAAEA,CAACA,UAAUA,EAAEA,UAAUA,EAAEA,OAAOA,EAAEA,OAAOA,EAAEA,MAAMA,EAAEA,OAAOA,EAAEA,QAAQA,CAACA;SAClFA,CAACA,CAACA;QAEHA,SAASA,SAASA,CAACA,MAAMA,EAAEA,KAAKA;YAC9BC,MAAMA,CAACA,eAAeA,EAAEA,CAACA;YACzBA,MAAMA,CAACA,UAAUA,CAACA,UAAUA,EAAEA;gBAC5BA,KAAKA,EAAEA,KAAKA;aACbA,CAACA,CAACA;QAELA,CAACA;QAAAD,CAACA;QAEFA,SAASA,oBAAoBA;YAC3BE,IAAIA,CAACA,WAAWA,GAAGA,CAACA,IAAIA,CAACA,WAAWA,CAACA;QACvCA,CAACA;QAEDF,SAASA,kBAAkBA;YACzBG,OAAOA,CAACA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;YAC/BA,EAAEA,CAACA,CAACA,IAAIA,CAACA,YAAYA,KAAKA,KAAKA,CAACA,CAACA,CAACA;gBAChCA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;gBAClCA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;YACvCA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,YAAYA,KAAKA,KAAKA,CAACA,CAACA,CAACA;gBACvCA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;gBACnCA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;YACtCA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,IAAIA,CAACA,KAAKA,CAACA,QAAQA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;gBAClCA,IAAIA,CAACA,KAAKA,CAACA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;YAEtCA,CAACA;QACHA,CAACA;QAEDH,SAASA,WAAWA;YAClBI,IAAIA,OAAOA,GAAGA,QAAQA,CACnBA,WAAWA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CACtBA,IAAIA,CAACA,SAASA,cAAcA,CAACA,QAAQA;gBACpCC,QAAQA,CAACA,MAAMA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACtDA,QAAQA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,IAAIA,CAACA,SAASA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACrDA,OAAOA,CAACA,GAAGA,CAACA,QAAQA,CAACA,CAACA;gBACtBA,eAAeA,CAACA,QAAQA,CAACA,CAACA;YAC5BA,CAACA,EAAED,SAASA,YAAYA,CAACA,MAAMA;gBAC7BE,OAAOA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA;YACtBA,CAACA,CAACF,CAACA;QACPA,CAACA;QAAAJ,CAACA;QAEFA,SAASA,eAAeA,CAACA,EAAEA;YACzBO,MAAMA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;YAErBA,IAAIA,OAAOA,GAAGA,QAAQA,CACnBA,MAAMA,CAACA,EAAEA,CAACA,CACVA,IAAIA,CAACA,SAASA,aAAaA,CAACA,QAAQA;gBAC/BC,KAAKA,CAACA,QAAQA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA,IAAIA,CAACA;oBAC/B,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE;wBAC9B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;qBAC1B,CAAC,CAAC;gBACP,CAAC,CAACA,CAACA;YACTA,CAACA,EAAED,SAASA,WAAWA,CAACA,MAAMA;gBAC5BE,OAAOA,CAACA,GAAGA,CAACA,MAAMA,CAACA,CAACA;YACtBA,CAACA,CAACF,CAACA;YAELA,OAAOA,CAACA,SAASA,CAACA,CAACA;gBACjB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC,CAACA,CAACA;QACLA,CAACA;QAAAP,CAACA;IACJA,CAACA;IAAA,CAAC;AACJ,CAAC,CAAC,EAAE,CAAC","file":"controllers/AppController.js","sourceRoot":"/home/soka/Workspace/vectorizer.js/","sourcesContent":["(function() {\n  angular\n    .module('Vectorizer.controllers')\n    .controller('AppController', AppController);\n\n  AppController.$inject = ['Uploader', 'Loader', 'Stage', '$scope'];\n\n\n  function AppController(Uploader, Loader, Stage, $scope) {\n    var self = this;\n\n    angular.extend(self, {\n      stage: Stage,\n      loader: Loader,\n      file: null,\n      pickColor: pickColor,\n      dataChanged: dataChanged,\n      changeVisibleLayer: changeVisibleLayer,\n      changeToggleCollapse: changeToggleCollapse,\n      visibleLayer: null,\n      isCollapsed: true,\n      gamma: 0.5,\n      input: {\n        turdsize: 2,\n        alphamax: 1,\n        turnpolicy: 'minority',\n        opttolerance: 0.2,\n        color: '#000000',\n        fillcolor: '#FFFFFF',\n        invert: false,\n        tight: false\n      },\n      turnpolicy: ['minority', 'majority', 'black', 'white', 'left', 'right', 'random']\n    });\n\n    function pickColor($event, model) {\n      $event.stopPropagation();\n      $scope.$broadcast('setModel', {\n        model: model\n      });\n\n    };\n\n    function changeToggleCollapse() {\n      self.isCollapsed = !self.isCollapsed;\n    }\n\n    function changeVisibleLayer() {\n      console.log(self.visibleLayer);\n      if (self.visibleLayer === 'SVG') {\n        self.stage.svgLayer.visible(true);\n        self.stage.imageLayer.visible(false);\n      } else if (self.visibleLayer === 'IMG') {\n        self.stage.svgLayer.visible(false);\n        self.stage.imageLayer.visible(true);\n      } else {\n        self.stage.svgLayer.visible(true);\n        self.stage.imageLayer.visible(true);\n\n      }\n    }\n\n    function dataChanged() {\n      var promise = Uploader\n        .getFileData(self.file)\n        .then(function getDataSuccess(fileData) {\n          fileData.append('params', JSON.stringify(self.input));\n          fileData.append('gamma', JSON.stringify(self.gamma));\n          console.log(fileData);\n          uploadImageData(fileData);\n        }, function getDataError(reason) {\n          console.log(reason);\n        });\n    };\n\n    function uploadImageData(fd) {\n      Loader.loading(true);\n\n      var promise = Uploader\n        .upload(fd)\n        .then(function uploadSuccess(response) {\n              Stage.loadData(response.data).then(function() {\n                  $scope.$broadcast('imageChanged', {\n                      image: self.stage.image\n                  });\n              });\n        }, function uploadError(reason) {\n          console.log(reason);\n        });\n\n      promise['finally'](function() {\n        Loader.loading(false);\n      });\n    };\n  };\n})();"]}